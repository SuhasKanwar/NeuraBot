<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NeuraBot Admin Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'DM Sans', Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
            color: #333;
        }
        .header {
            background-color: #070734;
            color: white;
            padding: 1rem 2rem;
            text-align: center;
        }
        h1 {
            margin: 0;
            font-weight: 700;
        }
        .main-container {
            max-width: 800px;
            margin: 9rem auto;
            padding: 2rem;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .animation-container {
            text-align: center;
            margin-bottom: 2rem;
        }
        .cloud {
            background-color: #212f5b;
            color: white;
            padding: 1rem;
            border-radius: 20px;
            display: inline-block;
            margin-bottom: 1rem;
        }
        .form-container {
            text-align: center;
        }
        .drop-area {
            border: 2px dashed #212f5b;
            border-radius: 10px;
            padding: 2rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .drop-area:hover, .drop-area.highlight {
            background-color: #f0f0f0;
        }
        .my-form {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        input[type="file"] {
            display: none;
        }
        .status-message {
            margin-top: 1rem;
            padding: 0.5rem;
            border-radius: 5px;
        }
        .status-success {
            background-color: #c6f6d5;
            color: #2f855a;
        }
        .status-failure {
            background-color: #fed7d7;
            color: #c53030;
        }
    </style>
</head>
<body>
    <header class="header">
        <h1>NeuraBot Admin Dashboard</h1>
    </header>
    <div class="main-container">
        <div class="animation-container" id="animation-container">
            <div class="cloud">Hi Admin! Upload the required PDF here</div>
            <div id="lottie-animation" style="width: 200px; height: 200px;"></div>
        </div>
        <div class="form-container">
            <div class="drop-area" id="drop-area">
                <form class="my-form" id="upload-form" enctype="multipart/form-data">
                    <p>Drag and drop a PDF file here or click to select a file</p>
                    <input type="file" id="fileElem" name="pdf" accept="application/pdf">
                </form>
                <div id="status-message" class="status-message"></div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.7.14/lottie.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('upload-form');
            const statusMessage = document.getElementById('status-message');
            const dropArea = document.getElementById('drop-area');
            const fileInput = document.getElementById('fileElem');

            // Lottie animation
            const animation = lottie.loadAnimation({
                container: document.getElementById('lottie-animation'),
                renderer: 'svg',
                loop: true,
                autoplay: true,
                path: 'path/to/your/lottie/animation.json' // Replace with your animation file
            });

            // Drag and drop functionality
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });

            function highlight(e) {
                dropArea.classList.add('highlight');
            }

            function unhighlight(e) {
                dropArea.classList.remove('highlight');
            }

            dropArea.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            }

            dropArea.addEventListener('click', () => fileInput.click());

            fileInput.addEventListener('change', function() {
                handleFiles(this.files);
            });

            function handleFiles(files) {
                if (files.length > 0) {
                    const file = files[0];
                    if (file.type === 'application/pdf') {
                        uploadFile(file);
                    } else {
                        statusMessage.textContent = "Please upload a PDF file.";
                        statusMessage.className = 'status-message status-failure';
                    }
                }
            }

            function uploadFile(file) {
                const formData = new FormData();
                formData.append('pdf', file);

                statusMessage.textContent = "Uploading and processing...";
                statusMessage.className = 'status-message';

                fetch('/admin/upload-pdf', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(data => {
                    statusMessage.textContent = data;
                    statusMessage.className = 'status-message status-success';
                })
                .catch(error => {
                    console.error('Error:', error);
                    statusMessage.textContent = "An error occurred while uploading and processing the file.";
                    statusMessage.className = 'status-message status-failure';
                });
            }
        });
    </script>
</body>
</html>